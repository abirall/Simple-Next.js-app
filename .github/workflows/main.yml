name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS Service
        env:
          CLUSTER_NAME: nextjs-cluster
          SERVICE_NAME: nextjs-service
          TASK_DEFINITION_FAMILY: nextjs-task
          CONTAINER_NAME: nextjs-app
          IMAGE_URI: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
        run: |
          echo "Registering new task definition..."
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY)
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_URI" '.taskDefinition | {family: .family, containerDefinitions: [.containerDefinitions[] | .image = $IMAGE], requiresCompatibilities: .requiresCompatibilities, networkMode: .networkMode, cpu: .cpu, memory: .memory, executionRoleArn: .executionRoleArn}')
          NEW_TASK_DEF_JSON=$(echo $NEW_TASK_DEF | jq -c .)
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF_JSON"

          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment
